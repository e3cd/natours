.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__radio-group {
    width: 50%;
    display: inline-block;
  }

  &__input {
    font-size: 1.5rem;
    padding: 1.5rem 2rem; //always more padding on sides on form input
    color: inherit;
    border-radius: 2px;
    background-color: rgba($color-white, 0.9);
    border: none;
    font-family: inherit; //inherit font-family from base
    //account for green focus, make it transparent at start to account for 3 green px moving down
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block;
    transition: all 0.3s;

    //remove blue highlight around html input --called focus

    &:focus {
      //set to focus, but accessiblity issues therefore give box-shadow and border-bottom to produce bottom green focus to account for this
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    //styling to make invalid inputs red and valid inputs green, ivalid pseudoclass
    &:focus:invalid {
      border-bottom: 3px solid $color-secondary-dark;
    }

    //placeholder styling use webkit input placeholder
    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }
  }

  //label styling
  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s;
  }

  //label effect to fly under input when input field is clicked on, use placeholder-shown and adjacent sibling selector
  //sibling selector can be used as the input and label classes are children or form group

  &__input:placeholder-shown + &__label {
    opacity: 0;
    visibility: hidden;
    //to fly down
    transform: translateY(-4rem);
  }

  //form button styling, hide html radio button with custom radio button

  &__radio-group {
    width: 49%;
    display: inline-block;
  }

  //hide html radio button
  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;
  }

  &__radio-button {
    //make radio button in circle
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    //need these to display in line of radio button
    display: inline-block;
    position: absolute;
    left: 0;
    top: -0.4rem;

    //use pseudoelement to display radio button
    &::after {
      @include absCenter;
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      background-color: $color-primary;
      opacity: 0;
      transition: opacity 0.2s;
    }
  }

  //???? use checked radio pseudoclass
  //as soon as the label element the radio input becomes checked, the checked psuedoclass becomes available. We  then select it's sibling element which is radio-label and then the child element which is needed to change each time the input is selected by changing the opacity to 1.

  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }
}
